generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(cuid())
  email     String      @unique
  name      String?
  image     String?
  emailVerified DateTime? @map("email_verified") // Optional: nullを許可し、DBカラム名をsnake_caseにする
  xp        Int         @default(0)
  level     Int         @default(1)
  habits    Habit[]
  checkIns  CheckIn[]
  memos     DailyMemo[] // DailyMemoとのリレーション
  createdAt DateTime    @default(now())
  accounts  Account[] // UserからAccountへのリレーション
  sessions  Session[] // UserからSessionへのリレーション
}

model Habit {
  id         String    @id @default(cuid())
  name       String
  category   String
  color      String?
  daysOfWeek String[]
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  checkIns   CheckIn[]
  createdAt  DateTime  @default(now())
}

model CheckIn {
  id          String   @id @default(cuid())
  date        DateTime @db.Date // 日付のみを格納
  isCompleted Boolean
  habitId     String
  userId      String
  habit       Habit    @relation(fields: [habitId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, habitId, date]) // ユーザーごと、習慣ごとに同じ日付のチェックインは1つだけ
}

// デイリーメモ用のモデル
model DailyMemo {
  id      String   @id @default(cuid())
  date    DateTime @db.Date // 日付のみを格納
  content String   @db.Text // 長文を許容
  userId  String
  user    User     @relation(fields: [userId], references: [id])

  @@unique([userId, date]) // ユーザーごとに同じ日付のメモは1つだけ
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}